import React, { useCallback } from 'react';
import { v4 as uuidv4 } from 'uuid';
import useEditorStore from '@/stores/editorStore';
import useNodesStore from '@/stores/nodesStore';
import { Node, NodeType, FlowState } from '@/types/types';
import { snapToGrid } from '@/utils/snapToGrid';
import { globalToLocal } from '@/utils/positionUtils';

export const useConnectorContextMenu = (
    nodeId: string,
    handle: string,
    variableType: string | undefined,
    isOut: boolean
) => {
    const handleConnectorContextMenu = useCallback((e: React.MouseEvent) => {
        // Only show context menu for output connectors
        if (!isOut) return;

        e.stopPropagation();
        e.preventDefault();

        // Capture mouse position NOW (before context menu opens)
        const mouseX = e.clientX;
        const mouseY = e.clientY;

        const openContextMenu = useEditorStore.getState().openContextMenu;

        const contextMenuItems = [{
            label: "Create Warp Gate",
            action: () => {
                // Get mouse position in local coordinates (using captured values)
                const localPos = globalToLocal(mouseX, mouseY);
                // Offset to the right so it doesn't spawn too close to the source
                const offsetX = localPos.x + 150;
                const snappedX = snapToGrid(offsetX);
                const snappedY = snapToGrid(localPos.y);

                console.log('üìç Creating warp gate at:', { x: snappedX, y: snappedY });

                // Create warp gate node
                const gateId = uuidv4();
                const newGate = {
                    id: gateId,
                    handle: '',  // Will be auto-generated by addNode() with uniqueNamesGenerator
                    name: "Warp Gate",
                    category: NodeType.WarpGate,  // MUST match type for switch statement in node.tsx
                    type: NodeType.WarpGate,
                    view: {
                        x: snappedX,
                        y: snappedY,
                        width: 32,
                        height: 32,
                        collapsed: false,
                        disabled: false,
                        adding: false,
                    },
                    variables: [],
                    flowState: FlowState.Enabled,
                    default_flow_state: 'enabled',
                    path: 'warp_gate',
                    code: '',
                    warpGate: {
                        sourceNodeId: nodeId,
                        sourceHandle: handle,
                        variableType: variableType || 'unknown'
                    }
                } as Node;

                // Add node to store (forceNewHandle will generate unique handle)
                useNodesStore.getState().addNode(newGate, true);
            }
        }];

        openContextMenu(e.clientX, e.clientY, contextMenuItems);
    }, [nodeId, handle, variableType, isOut]);

    return { handleConnectorContextMenu };
};
